require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe HoursPackagesController do
  include Devise::TestHelpers
  let(:manager) { FactoryGirl.create(:manager) }
  let(:pupil) { FactoryGirl.create(:pupil) }
  let(:teacher) { FactoryGirl.create(:teacher) }

  # This should return the minimal set of attributes required to create a valid
  # HoursPackage. As you add validations to HoursPackage, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { FactoryGirl.attributes_for(:hours_package) }

  before do
    sign_in manager.user
  end

  describe "GET index" do
    it "assigns all hours_packages as @hours_packages" do
      hours_package = HoursPackage.create! valid_attributes
      get :index, {}
      expect(assigns(:hours_packages)).to eq([hours_package])
    end
  end

  describe "GET show" do
    it "assigns the requested hours_package as @hours_package" do
      hours_package = HoursPackage.create! valid_attributes
      get :show, {:id => hours_package.to_param}
      expect(assigns(:hours_package)).to eq(hours_package)
    end
  end

  describe "GET new" do
    it "assigns a new hours_package as @hours_package" do
      get :new, {}
      expect(assigns(:hours_package)).to be_a_new(HoursPackage)
    end
  end

  describe "GET edit" do
    it "assigns the requested hours_package as @hours_package" do
      hours_package = HoursPackage.create! valid_attributes
      get :edit, {:id => hours_package.to_param}
      expect(assigns(:hours_package)).to eq(hours_package)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new HoursPackage" do
        expect {
          post :create, {:hours_package => valid_attributes}
        }.to change(HoursPackage, :count).by(1)
      end

      it "assigns a newly created hours_package as @hours_package" do
        post :create, {:hours_package => valid_attributes}
        expect(assigns(:hours_package)).to be_a(HoursPackage)
        expect(assigns(:hours_package)).to be_persisted
      end

      it "redirects to the created hours_package" do
        post :create, {:hours_package => valid_attributes}
        expect(response).to redirect_to(HoursPackage.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved hours_package as @hours_package" do
        # Trigger the behavior that occurs when invalid params are submitted
        HoursPackage.any_instance.stub(:save).and_return(false)
        post :create, {:hours_package => { "pupils" => "invalid value" }}
        expect(assigns(:hours_package)).to be_a_new(HoursPackage)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        HoursPackage.any_instance.stub(:save).and_return(false)
        post :create, {:hours_package => { "pupils" => "invalid value" }}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested hours_package" do
        hours_package = HoursPackage.create! valid_attributes
        # Assuming there are no other hours_packages in the database, this
        # specifies that the HoursPackage created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        expect_any_instance_of(HoursPackage).to receive(:update).with({ "price" => "2000" })
        put :update, {:id => hours_package.to_param, :hours_package => { "price" => "2000" }}
      end

      it "assigns the requested hours_package as @hours_package" do
        hours_package = HoursPackage.create! valid_attributes
        put :update, {:id => hours_package.to_param, :hours_package => valid_attributes}
        expect(assigns(:hours_package)).to eq(hours_package)
      end

      it "redirects to the hours_package" do
        hours_package = HoursPackage.create! valid_attributes
        put :update, {:id => hours_package.to_param, :hours_package => valid_attributes}
        expect(response).to redirect_to(hours_package)
      end
    end

    describe "with invalid params" do
      it "assigns the hours_package as @hours_package" do
        hours_package = HoursPackage.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        HoursPackage.any_instance.stub(:save).and_return(false)
        put :update, {:id => hours_package.to_param, :hours_package => { "pupils" => "invalid value" }}
        expect(assigns(:hours_package)).to eq(hours_package)
      end

      it "re-renders the 'edit' template" do
        hours_package = HoursPackage.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        HoursPackage.any_instance.stub(:save).and_return(false)
        put :update, {:id => hours_package.to_param, :hours_package => { "pupils" => "invalid value" }}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested hours_package" do
      hours_package = HoursPackage.create! valid_attributes
      expect {
        delete :destroy, {:id => hours_package.to_param}
      }.to change(HoursPackage, :count).by(-1)
    end

    it "redirects to the hours_packages list" do
      hours_package = HoursPackage.create! valid_attributes
      delete :destroy, {:id => hours_package.to_param}
      expect(response).to redirect_to(hours_packages_url)
    end
  end

end
