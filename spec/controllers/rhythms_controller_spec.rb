require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe RhythmsController do
  include Devise::TestHelpers
  let(:manager) { FactoryGirl.create(:manager) }
  let(:modality) { FactoryGirl.create(:modality) }

  # This should return the minimal set of attributes required to create a valid
  # Rhythm. As you add validations to Rhythm, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    FactoryGirl.attributes_for(:rhythm)
  end

  before do
    sign_in manager.user
  end

  describe "GET index" do
    it "assigns all rhythms as @rhythms" do
      rhythm = Rhythm.create! valid_attributes
      get :index, {}
      expect(assigns(:rhythms)).to eq([rhythm])
    end
  end

  describe "GET show" do
    it "assigns the requested rhythm as @rhythm" do
      rhythm = Rhythm.create! valid_attributes
      get :show, {:id => rhythm.to_param}
      expect(assigns(:rhythm)).to eq(rhythm)
    end
  end

  describe "GET new" do
    it "assigns a new rhythm as @rhythm" do
      get :new, {}
      expect(assigns(:rhythm)).to be_a_new(Rhythm)
    end
  end

  describe "GET edit" do
    it "assigns the requested rhythm as @rhythm" do
      rhythm = Rhythm.create! valid_attributes
      get :edit, {:id => rhythm.to_param}
      expect(assigns(:rhythm)).to eq(rhythm)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Rhythm" do
        expect {
          post :create, {:rhythm => valid_attributes}
        }.to change(Rhythm, :count).by(1)
      end

      it "assigns a newly created rhythm as @rhythm" do
        post :create, {:rhythm => valid_attributes}
        expect(assigns(:rhythm)).to be_a(Rhythm)
        expect(assigns(:rhythm)).to be_persisted
      end

      it "redirects to the created rhythm" do
        post :create, {:rhythm => valid_attributes}
        expect(response).to redirect_to(Rhythm.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved rhythm as @rhythm" do
        # Trigger the behavior that occurs when invalid params are submitted
        Rhythm.any_instance.stub(:save).and_return(false)
        post :create, {:rhythm => { "name" => "invalid value", modality: modality }}
        expect(assigns(:rhythm)).to be_a_new(Rhythm)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Rhythm.any_instance.stub(:save).and_return(false)
        post :create, {:rhythm => { "name" => "invalid value", modality: modality }}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested rhythm" do
        rhythm = Rhythm.create! valid_attributes
        # Assuming there are no other rhythms in the database, this
        # specifies that the Rhythm created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        expect_any_instance_of(Rhythm).to receive(:update).with({ "name" => "MyString", "modality" => modality })
        put :update, {:id => rhythm.to_param, :rhythm => { "name" => "MyString", modality: modality }}
      end

      it "assigns the requested rhythm as @rhythm" do
        rhythm = Rhythm.create! valid_attributes
        put :update, {:id => rhythm.to_param, :rhythm => valid_attributes}
        expect(assigns(:rhythm)).to eq(rhythm)
      end

      it "redirects to the rhythm" do
        rhythm = Rhythm.create! valid_attributes
        put :update, {:id => rhythm.to_param, :rhythm => valid_attributes}
        expect(response).to redirect_to(rhythm)
      end
    end

    describe "with invalid params" do
      it "assigns the rhythm as @rhythm" do
        rhythm = Rhythm.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Rhythm.any_instance.stub(:save).and_return(false)
        put :update, {:id => rhythm.to_param, :rhythm => { "name" => "invalid value", modality: modality }}
        expect(assigns(:rhythm)).to eq(rhythm)
      end

      it "re-renders the 'edit' template" do
        rhythm = Rhythm.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Rhythm.any_instance.stub(:save).and_return(false)
        put :update, {:id => rhythm.to_param, :rhythm => { "name" => "invalid value", modality: modality }}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested rhythm" do
      rhythm = Rhythm.create! valid_attributes
      expect {
        delete :destroy, {:id => rhythm.to_param}
      }.to change(Rhythm, :count).by(-1)
    end

    it "redirects to the rhythms list" do
      rhythm = Rhythm.create! valid_attributes
      delete :destroy, {:id => rhythm.to_param}
      expect(response).to redirect_to(rhythms_url)
    end
  end

end
